# Nom du workflow qui s'affichera dans l'onglet "Actions" de votre dépôt GitHub.
name: Build and Push Docker Image

# Déclencheurs du workflow.
on:
  # Se déclenche automatiquement à chaque push sur la branche "main".
  push:
    branches:
      - "main"
  # Permet de déclencher manuellement le workflow depuis l'interface de GitHub.
  workflow_dispatch:

# Liste des jobs à exécuter.
jobs:
  # Nom du job.
  build-and-push:
    # Machine virtuelle sur laquelle le job va s'exécuter. "ubuntu-latest" est un bon choix standard.
    runs-on: ubuntu-latest
    # Permissions nécessaires pour ce job.
    permissions:
      contents: write  # Permission de lire ET écrire le contenu (pour commiter la nouvelle version).
      packages: write  # Permission d'écrire des packages (pour publier l'image sur ghcr.io).

    # Étapes du job.
    steps:
      # 1. Récupère le code source de votre dépôt.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Se connecte au GitHub Container Registry (ghcr.io).
      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # Le nom d'utilisateur est l'acteur qui a déclenché le workflow (vous).
          username: ${{ github.actor }}
          # Le mot de passe est un token généré automatiquement par GitHub pour cette action.
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. Met en place Docker Buildx, un outil qui permet de construire des images pour plusieurs architectures.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Prépare les métadonnées de l'image (nom en minuscule + version sémantique auto-incrémentée).
      - name: Prepare image metadata
        run: |
          IMAGE_NAME=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          
          # Lit la version actuelle
          CURRENT_VERSION=$(cat VERSION)
          
          # Découpe la version en MAJOR.MINOR.PATCH
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Incrémente le PATCH
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          
          # Sauvegarde la nouvelle version
          echo "$NEW_VERSION" > VERSION
          
          echo "IMAGE_NAME=${IMAGE_NAME}" >> "$GITHUB_ENV"
          echo "IMAGE_VERSION=v${NEW_VERSION}" >> "$GITHUB_ENV"
          echo "IMAGE_VERSION_SHORT=${NEW_VERSION}" >> "$GITHUB_ENV"
          echo "OLD_VERSION=${CURRENT_VERSION}" >> "$GITHUB_ENV"
          
          echo "✅ Version incrémentée : ${CURRENT_VERSION} → ${NEW_VERSION}"
      
      # 5. Commite la nouvelle version dans le dépôt
      - name: Commit new version
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add VERSION
          git commit -m "chore: bump version ${{ env.OLD_VERSION }} → ${{ env.IMAGE_VERSION_SHORT }} [skip ci]" || echo "No changes to commit"
          git push || echo "Nothing to push"

      # 6. Génère le Dockerfile à partir du template et du fichier de configuration.
      - name: Generate Dockerfile
        run: python3 generate_dockerfile.py

      # 7. Construit l'image Docker et la publie sur le GitHub Container Registry.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # Le contexte de build est le répertoire courant.
          context: .
          # Le chemin vers le Dockerfile à utiliser.
          file: ./dockerfile
          # "true" pour publier l'image après la construction.
          push: true
          # Construit l'image pour les architectures amd64 (standard) et arm64 (ex: Raspberry Pi, Mac M1/M2).
          platforms: linux/amd64,linux/arm64
          # Les "tags" (étiquettes) de l'image.
          # Crée 2 tags : latest et v1.0.0
          tags: |
            ghcr.io/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
