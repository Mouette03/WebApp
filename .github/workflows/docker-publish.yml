# Nom du workflow qui s'affichera dans l'onglet "Actions" de votre dépôt GitHub.
name: Build and Push Docker Image

# Déclencheurs du workflow.
on:
  # Se déclenche automatiquement à chaque push sur la branche "main".
  push:
    branches:
      - "main"
  # Permet de déclencher manuellement le workflow depuis l'interface de GitHub.
  workflow_dispatch:

# Liste des jobs à exécuter.
jobs:
  # Nom du job.
  build-and-push:
    # Machine virtuelle sur laquelle le job va s'exécuter. "ubuntu-latest" est un bon choix standard.
    runs-on: ubuntu-latest
    # Permissions nécessaires pour ce job.
    permissions:
      contents: read   # Permission de lire le contenu du dépôt (pour le checkout).
      packages: write  # Permission d'écrire des packages (pour publier l'image sur ghcr.io).

    # Étapes du job.
    steps:
      # 1. Récupère le code source de votre dépôt.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Se connecte au GitHub Container Registry (ghcr.io).
      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # Le nom d'utilisateur est l'acteur qui a déclenché le workflow (vous).
          username: ${{ github.actor }}
          # Le mot de passe est un token généré automatiquement par GitHub pour cette action.
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. Met en place Docker Buildx, un outil qui permet de construire des images pour plusieurs architectures.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Prépare les métadonnées de l'image (nom en minuscule + numéro de version auto-incrémenté).
      - name: Prepare image metadata
        run: |
          IMAGE_NAME=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          IMAGE_VERSION=${GITHUB_RUN_NUMBER}
          echo "IMAGE_NAME=${IMAGE_NAME}" >> "$GITHUB_ENV"
          echo "IMAGE_VERSION=${IMAGE_VERSION}" >> "$GITHUB_ENV"

      # 5. Génère le Dockerfile à partir du template et du fichier de configuration.
      - name: Generate Dockerfile
        run: python3 generate_dockerfile.py

      # 6. Construit l'image Docker et la publie sur le GitHub Container Registry.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # Le contexte de build est le répertoire courant.
          context: .
          # Le chemin vers le Dockerfile à utiliser.
          file: ./dockerfile
          # "true" pour publier l'image après la construction.
          push: true
          # Construit l'image pour les architectures amd64 (standard) et arm64 (ex: Raspberry Pi, Mac M1/M2).
          platforms: linux/amd64,linux/arm64
          # Les "tags" (étiquettes) de l'image.
          tags: |
            ghcr.io/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
            ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
